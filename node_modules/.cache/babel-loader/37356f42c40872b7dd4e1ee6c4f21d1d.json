{"ast":null,"code":"var _jsxFileName = \"/Users/laurakeating/code/training/testing/rtl-sundaes/src/pages/entry/ScoopOption.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport { useOrderDetails } from \"../../contexts/OrderDetails\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ScoopOptions(_ref) {\n  _s();\n\n  let {\n    name,\n    imagePath\n  } = _ref;\n  const {\n    updateItemCount\n  } = useOrderDetails();\n  const [isValid, setIsValid] = useState(true);\n\n  const handleChange = event => {\n    const currentValue = event.target.value; // make sure we're using a number and not a string to validate\n\n    const currentValueFloat = parseFloat(currentValue);\n    const valueIsValid = 0 <= currentValueFloat && currentValueFloat <= 10 && Math.floor(currentValueFloat) === currentValueFloat; // validate\n\n    setIsValid(valueIsValid); // adjust scoop count with currentValue if it's valid; 0 if it's not\n\n    const newValue = valueIsValid ? parseInt(currentValue) : 0;\n    updateItemCount(name, newValue, \"scoops\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(Col, {\n    xs: 12,\n    sm: 6,\n    md: 4,\n    lg: 3,\n    style: {\n      textAlign: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      style: {\n        width: \"75%\"\n      },\n      src: `http://localhost:3030/${imagePath}`,\n      alt: `${name} scoop`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      controlId: `${name}-count`,\n      as: Row,\n      style: {\n        marginTop: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        column: true,\n        xs: \"6\",\n        style: {\n          textAlign: \"right\"\n        },\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: \"5\",\n        style: {\n          textAlign: \"left\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"number\",\n          defaultValue: 0,\n          onChange: handleChange,\n          isInvalid: !isValid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ScoopOptions, \"zjWtvMW8TRgsEMAPMbYWO3woMnc=\", false, function () {\n  return [useOrderDetails];\n});\n\n_c = ScoopOptions;\n\nvar _c;\n\n$RefreshReg$(_c, \"ScoopOptions\");","map":{"version":3,"names":["useState","Col","Form","Row","useOrderDetails","ScoopOptions","name","imagePath","updateItemCount","isValid","setIsValid","handleChange","event","currentValue","target","value","currentValueFloat","parseFloat","valueIsValid","Math","floor","newValue","parseInt","textAlign","width","marginTop"],"sources":["/Users/laurakeating/code/training/testing/rtl-sundaes/src/pages/entry/ScoopOption.jsx"],"sourcesContent":["import { useState } from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport { useOrderDetails } from \"../../contexts/OrderDetails\";\n\nexport default function ScoopOptions({ name, imagePath }) {\n  const { updateItemCount } = useOrderDetails();\n\n  const [isValid, setIsValid] = useState(true);\n  const handleChange = (event) => {\n    const currentValue = event.target.value;\n\n    // make sure we're using a number and not a string to validate\n    const currentValueFloat = parseFloat(currentValue);\n    const valueIsValid =\n      0 <= currentValueFloat &&\n      currentValueFloat <= 10 &&\n      Math.floor(currentValueFloat) === currentValueFloat;\n\n    // validate\n    setIsValid(valueIsValid);\n\n    // adjust scoop count with currentValue if it's valid; 0 if it's not\n    const newValue = valueIsValid ? parseInt(currentValue) : 0;\n    updateItemCount(name, newValue, \"scoops\");\n  };\n\n  return (\n    <Col xs={12} sm={6} md={4} lg={3} style={{ textAlign: \"center\" }}>\n      <img\n        style={{ width: \"75%\" }}\n        src={`http://localhost:3030/${imagePath}`}\n        alt={`${name} scoop`}\n      />\n      <Form.Group\n        controlId={`${name}-count`}\n        as={Row}\n        style={{ marginTop: \"10px\" }}\n      >\n        <Form.Label column xs=\"6\" style={{ textAlign: \"right\" }}>\n          {name}\n        </Form.Label>\n        <Col xs=\"5\" style={{ textAlign: \"left\" }}>\n          <Form.Control\n            type=\"number\"\n            defaultValue={0}\n            onChange={handleChange}\n            isInvalid={!isValid}\n          />\n        </Col>\n      </Form.Group>\n    </Col>\n  );\n}\n"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,SAASC,eAAT,QAAgC,6BAAhC;;AAEA,eAAe,SAASC,YAAT,OAA2C;EAAA;;EAAA,IAArB;IAAEC,IAAF;IAAQC;EAAR,CAAqB;EACxD,MAAM;IAAEC;EAAF,IAAsBJ,eAAe,EAA3C;EAEA,MAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,IAAD,CAAtC;;EACA,MAAMW,YAAY,GAAIC,KAAD,IAAW;IAC9B,MAAMC,YAAY,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAlC,CAD8B,CAG9B;;IACA,MAAMC,iBAAiB,GAAGC,UAAU,CAACJ,YAAD,CAApC;IACA,MAAMK,YAAY,GAChB,KAAKF,iBAAL,IACAA,iBAAiB,IAAI,EADrB,IAEAG,IAAI,CAACC,KAAL,CAAWJ,iBAAX,MAAkCA,iBAHpC,CAL8B,CAU9B;;IACAN,UAAU,CAACQ,YAAD,CAAV,CAX8B,CAa9B;;IACA,MAAMG,QAAQ,GAAGH,YAAY,GAAGI,QAAQ,CAACT,YAAD,CAAX,GAA4B,CAAzD;IACAL,eAAe,CAACF,IAAD,EAAOe,QAAP,EAAiB,QAAjB,CAAf;EACD,CAhBD;;EAkBA,oBACE,QAAC,GAAD;IAAK,EAAE,EAAE,EAAT;IAAa,EAAE,EAAE,CAAjB;IAAoB,EAAE,EAAE,CAAxB;IAA2B,EAAE,EAAE,CAA/B;IAAkC,KAAK,EAAE;MAAEE,SAAS,EAAE;IAAb,CAAzC;IAAA,wBACE;MACE,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAT,CADT;MAEE,GAAG,EAAG,yBAAwBjB,SAAU,EAF1C;MAGE,GAAG,EAAG,GAAED,IAAK;IAHf;MAAA;MAAA;MAAA;IAAA,QADF,eAME,QAAC,IAAD,CAAM,KAAN;MACE,SAAS,EAAG,GAAEA,IAAK,QADrB;MAEE,EAAE,EAAEH,GAFN;MAGE,KAAK,EAAE;QAAEsB,SAAS,EAAE;MAAb,CAHT;MAAA,wBAKE,QAAC,IAAD,CAAM,KAAN;QAAY,MAAM,MAAlB;QAAmB,EAAE,EAAC,GAAtB;QAA0B,KAAK,EAAE;UAAEF,SAAS,EAAE;QAAb,CAAjC;QAAA,UACGjB;MADH;QAAA;QAAA;QAAA;MAAA,QALF,eAQE,QAAC,GAAD;QAAK,EAAE,EAAC,GAAR;QAAY,KAAK,EAAE;UAAEiB,SAAS,EAAE;QAAb,CAAnB;QAAA,uBACE,QAAC,IAAD,CAAM,OAAN;UACE,IAAI,EAAC,QADP;UAEE,YAAY,EAAE,CAFhB;UAGE,QAAQ,EAAEZ,YAHZ;UAIE,SAAS,EAAE,CAACF;QAJd;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QARF;IAAA;MAAA;MAAA;MAAA;IAAA,QANF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AA0BD;;GAhDuBJ,Y;UACMD,e;;;KADNC,Y"},"metadata":{},"sourceType":"module"}