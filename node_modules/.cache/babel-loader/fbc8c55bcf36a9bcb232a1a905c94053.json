{"ast":null,"code":"var _jsxFileName = \"/Users/laurakeating/code/training/testing/rtl-sundaes/src/pages/summary/OrderSummary.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport SummaryForm from \"./SummaryForm\";\nimport { useOrderDetails } from \"../../contexts/OrderDetails\";\nimport { formatCurrency } from \"../../utilities\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function OrderSummary(_ref) {\n  _s();\n\n  let {\n    setOrderPhase\n  } = _ref;\n  const {\n    totals,\n    optionCounts\n  } = useOrderDetails();\n  const scoopArray = Object.entries(optionCounts.scoops);\n  const scoopList = scoopArray.map(_ref2 => {\n    let [key, value] = _ref2;\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [value, \" \", key]\n    }, key, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }, this);\n  }); // only display toppings if the toppings total is nonzero\n\n  const hasToppings = totals.toppings > 0;\n  let toppingsDisplay = null;\n\n  if (hasToppings) {\n    const toppingsArray = Object.keys(optionCounts.toppings);\n    const toppingList = toppingsArray.map(key => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: key\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 52\n    }, this));\n    toppingsDisplay = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Toppings: \", formatCurrency(totals.toppings)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: toppingList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Order Summary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Scoops: \", formatCurrency(totals.scoops)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: scoopList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), toppingsDisplay, /*#__PURE__*/_jsxDEV(SummaryForm, {\n      setOrderPhase: setOrderPhase\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n\n_s(OrderSummary, \"OxkNzOViyACXKTzFNUbnZLp90ak=\", false, function () {\n  return [useOrderDetails];\n});\n\n_c = OrderSummary;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrderSummary\");","map":{"version":3,"names":["React","SummaryForm","useOrderDetails","formatCurrency","OrderSummary","setOrderPhase","totals","optionCounts","scoopArray","Object","entries","scoops","scoopList","map","key","value","hasToppings","toppings","toppingsDisplay","toppingsArray","keys","toppingList"],"sources":["/Users/laurakeating/code/training/testing/rtl-sundaes/src/pages/summary/OrderSummary.jsx"],"sourcesContent":["import React from \"react\";\nimport SummaryForm from \"./SummaryForm\";\nimport { useOrderDetails } from \"../../contexts/OrderDetails\";\nimport { formatCurrency } from \"../../utilities\";\n\nexport default function OrderSummary({ setOrderPhase }) {\n  const { totals, optionCounts } = useOrderDetails();\n\n  const scoopArray = Object.entries(optionCounts.scoops);\n  const scoopList = scoopArray.map(([key, value]) => (\n    <li key={key}>\n      {value} {key}\n    </li>\n  ));\n\n  // only display toppings if the toppings total is nonzero\n  const hasToppings = totals.toppings > 0;\n  let toppingsDisplay = null;\n\n  if (hasToppings) {\n    const toppingsArray = Object.keys(optionCounts.toppings);\n    const toppingList = toppingsArray.map((key) => <li key={key}>{key}</li>);\n    toppingsDisplay = (\n      <>\n        <h2>Toppings: {formatCurrency(totals.toppings)}</h2>\n        <ul>{toppingList}</ul>\n      </>\n    );\n  }\n\n  return (\n    <div>\n      <h1>Order Summary</h1>\n      <h2>Scoops: {formatCurrency(totals.scoops)}</h2>\n      <ul>{scoopList}</ul>\n      {toppingsDisplay}\n      <SummaryForm setOrderPhase={setOrderPhase} />\n    </div>\n  );\n}\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,eAAT,QAAgC,6BAAhC;AACA,SAASC,cAAT,QAA+B,iBAA/B;;;AAEA,eAAe,SAASC,YAAT,OAAyC;EAAA;;EAAA,IAAnB;IAAEC;EAAF,CAAmB;EACtD,MAAM;IAAEC,MAAF;IAAUC;EAAV,IAA2BL,eAAe,EAAhD;EAEA,MAAMM,UAAU,GAAGC,MAAM,CAACC,OAAP,CAAeH,YAAY,CAACI,MAA5B,CAAnB;EACA,MAAMC,SAAS,GAAGJ,UAAU,CAACK,GAAX,CAAe;IAAA,IAAC,CAACC,GAAD,EAAMC,KAAN,CAAD;IAAA,oBAC/B;MAAA,WACGA,KADH,OACWD,GADX;IAAA,GAASA,GAAT;MAAA;MAAA;MAAA;IAAA,QAD+B;EAAA,CAAf,CAAlB,CAJsD,CAUtD;;EACA,MAAME,WAAW,GAAGV,MAAM,CAACW,QAAP,GAAkB,CAAtC;EACA,IAAIC,eAAe,GAAG,IAAtB;;EAEA,IAAIF,WAAJ,EAAiB;IACf,MAAMG,aAAa,GAAGV,MAAM,CAACW,IAAP,CAAYb,YAAY,CAACU,QAAzB,CAAtB;IACA,MAAMI,WAAW,GAAGF,aAAa,CAACN,GAAd,CAAmBC,GAAD,iBAAS;MAAA,UAAeA;IAAf,GAASA,GAAT;MAAA;MAAA;MAAA;IAAA,QAA3B,CAApB;IACAI,eAAe,gBACb;MAAA,wBACE;QAAA,yBAAef,cAAc,CAACG,MAAM,CAACW,QAAR,CAA7B;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAA,UAAKI;MAAL;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA,gBADF;EAMD;;EAED,oBACE;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAA,uBAAalB,cAAc,CAACG,MAAM,CAACK,MAAR,CAA3B;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF,eAGE;MAAA,UAAKC;IAAL;MAAA;MAAA;MAAA;IAAA,QAHF,EAIGM,eAJH,eAKE,QAAC,WAAD;MAAa,aAAa,EAAEb;IAA5B;MAAA;MAAA;MAAA;IAAA,QALF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AASD;;GAlCuBD,Y;UACWF,e;;;KADXE,Y"},"metadata":{},"sourceType":"module"}