{"ast":null,"code":"var _jsxFileName = \"/Users/laurakeating/code/training/udemy-TESTING-LIBRARY/finished-projects/sundaes-on-demand/src/contexts/OrderDetails.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from \"react\";\nimport { pricePerItem } from \"../constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OrderDetails = /*#__PURE__*/createContext(); // create custom hook to check whether we're in a provider\n\nexport function useOrderDetails() {\n  _s();\n\n  const contextValue = useContext(OrderDetails);\n\n  if (!contextValue) {\n    throw new Error(\"useOrderDetails must be called from within an OrderDetailsProvider\");\n  }\n\n  return contextValue;\n}\n\n_s(useOrderDetails, \"LIxFXvZbUdXE/TWxKLLXMjM3Mig=\");\n\nexport function OrderDetailsProvider(props) {\n  _s2();\n\n  const [optionCounts, setOptionCounts] = useState({\n    scoops: {},\n    // example: { Chocolate: 1, Vanilla: 2 }\n    toppings: {} // example: { \"Gummi Bears\": 1 }\n\n  });\n\n  function updateItemCount(itemName, newItemCount, optionType) {\n    // make a copy of existing state\n    const newOptionCounts = { ...optionCounts\n    }; // update the copy with the new information\n\n    newOptionCounts[optionType][itemName] = newItemCount; // update the state with the updated copy\n\n    setOptionCounts(newOptionCounts); // alternate way using function argument to setOptionCounts\n    // see https://www.udemy.com/course/react-testing-library/learn/#questions/18721990/\n    // setOptionCounts((previousOptionCounts) => ({\n    //   ...previousOptionCounts,\n    //   [optionType]: {\n    //     ...previousOptionCounts[optionType],\n    //     [itemName]: newItemCount,\n    //   },\n    // }));\n  }\n\n  function resetOrder() {\n    setOptionCounts({\n      scoops: {},\n      toppings: {}\n    });\n  } // utility function to derive totals from optionCounts state value\n\n\n  function calculateTotal(optionType) {\n    // get an array of counts for the option type (for example, [1, 2])\n    const countsArray = Object.values(optionCounts[optionType]); // total the values in the array of counts for the number of items\n\n    const totalCount = countsArray.reduce((total, value) => total + value, 0); // multiply the total number of items by the price for this item type\n\n    return totalCount * pricePerItem[optionType];\n  }\n\n  const totals = {\n    scoops: calculateTotal(\"scoops\"),\n    toppings: calculateTotal(\"toppings\")\n  };\n  const value = {\n    optionCounts,\n    totals,\n    updateItemCount,\n    resetOrder\n  };\n  return /*#__PURE__*/_jsxDEV(OrderDetails.Provider, {\n    value: value,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 10\n  }, this);\n}\n\n_s2(OrderDetailsProvider, \"VdjGUzZ1K5p8XrGV4uR+makNVT8=\");\n\n_c = OrderDetailsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrderDetailsProvider\");","map":{"version":3,"names":["createContext","useContext","useState","pricePerItem","OrderDetails","useOrderDetails","contextValue","Error","OrderDetailsProvider","props","optionCounts","setOptionCounts","scoops","toppings","updateItemCount","itemName","newItemCount","optionType","newOptionCounts","resetOrder","calculateTotal","countsArray","Object","values","totalCount","reduce","total","value","totals"],"sources":["/Users/laurakeating/code/training/udemy-TESTING-LIBRARY/finished-projects/sundaes-on-demand/src/contexts/OrderDetails.jsx"],"sourcesContent":["import { createContext, useContext, useState } from \"react\";\nimport { pricePerItem } from \"../constants\";\n\nconst OrderDetails = createContext();\n\n// create custom hook to check whether we're in a provider\nexport function useOrderDetails() {\n  const contextValue = useContext(OrderDetails);\n\n  if (!contextValue) {\n    throw new Error(\n      \"useOrderDetails must be called from within an OrderDetailsProvider\"\n    );\n  }\n\n  return contextValue;\n}\n\nexport function OrderDetailsProvider(props) {\n  const [optionCounts, setOptionCounts] = useState({\n    scoops: {}, // example: { Chocolate: 1, Vanilla: 2 }\n    toppings: {}, // example: { \"Gummi Bears\": 1 }\n  });\n\n  function updateItemCount(itemName, newItemCount, optionType) {\n    // make a copy of existing state\n    const newOptionCounts = { ...optionCounts };\n\n    // update the copy with the new information\n    newOptionCounts[optionType][itemName] = newItemCount;\n\n    // update the state with the updated copy\n    setOptionCounts(newOptionCounts);\n\n    // alternate way using function argument to setOptionCounts\n    // see https://www.udemy.com/course/react-testing-library/learn/#questions/18721990/\n    // setOptionCounts((previousOptionCounts) => ({\n    //   ...previousOptionCounts,\n    //   [optionType]: {\n    //     ...previousOptionCounts[optionType],\n    //     [itemName]: newItemCount,\n    //   },\n    // }));\n  }\n\n  function resetOrder() {\n    setOptionCounts({ scoops: {}, toppings: {} });\n  }\n\n  // utility function to derive totals from optionCounts state value\n  function calculateTotal(optionType) {\n    // get an array of counts for the option type (for example, [1, 2])\n    const countsArray = Object.values(optionCounts[optionType]);\n\n    // total the values in the array of counts for the number of items\n    const totalCount = countsArray.reduce((total, value) => total + value, 0);\n\n    // multiply the total number of items by the price for this item type\n    return totalCount * pricePerItem[optionType];\n  }\n\n  const totals = {\n    scoops: calculateTotal(\"scoops\"),\n    toppings: calculateTotal(\"toppings\"),\n  };\n\n  const value = { optionCounts, totals, updateItemCount, resetOrder };\n  return <OrderDetails.Provider value={value} {...props} />;\n}\n"],"mappings":";;;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,QAApC,QAAoD,OAApD;AACA,SAASC,YAAT,QAA6B,cAA7B;;AAEA,MAAMC,YAAY,gBAAGJ,aAAa,EAAlC,C,CAEA;;AACA,OAAO,SAASK,eAAT,GAA2B;EAAA;;EAChC,MAAMC,YAAY,GAAGL,UAAU,CAACG,YAAD,CAA/B;;EAEA,IAAI,CAACE,YAAL,EAAmB;IACjB,MAAM,IAAIC,KAAJ,CACJ,oEADI,CAAN;EAGD;;EAED,OAAOD,YAAP;AACD;;GAVeD,e;;AAYhB,OAAO,SAASG,oBAAT,CAA8BC,KAA9B,EAAqC;EAAA;;EAC1C,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC;IAC/CU,MAAM,EAAE,EADuC;IACnC;IACZC,QAAQ,EAAE,EAFqC,CAEjC;;EAFiC,CAAD,CAAhD;;EAKA,SAASC,eAAT,CAAyBC,QAAzB,EAAmCC,YAAnC,EAAiDC,UAAjD,EAA6D;IAC3D;IACA,MAAMC,eAAe,GAAG,EAAE,GAAGR;IAAL,CAAxB,CAF2D,CAI3D;;IACAQ,eAAe,CAACD,UAAD,CAAf,CAA4BF,QAA5B,IAAwCC,YAAxC,CAL2D,CAO3D;;IACAL,eAAe,CAACO,eAAD,CAAf,CAR2D,CAU3D;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACD;;EAED,SAASC,UAAT,GAAsB;IACpBR,eAAe,CAAC;MAAEC,MAAM,EAAE,EAAV;MAAcC,QAAQ,EAAE;IAAxB,CAAD,CAAf;EACD,CA7ByC,CA+B1C;;;EACA,SAASO,cAAT,CAAwBH,UAAxB,EAAoC;IAClC;IACA,MAAMI,WAAW,GAAGC,MAAM,CAACC,MAAP,CAAcb,YAAY,CAACO,UAAD,CAA1B,CAApB,CAFkC,CAIlC;;IACA,MAAMO,UAAU,GAAGH,WAAW,CAACI,MAAZ,CAAmB,CAACC,KAAD,EAAQC,KAAR,KAAkBD,KAAK,GAAGC,KAA7C,EAAoD,CAApD,CAAnB,CALkC,CAOlC;;IACA,OAAOH,UAAU,GAAGrB,YAAY,CAACc,UAAD,CAAhC;EACD;;EAED,MAAMW,MAAM,GAAG;IACbhB,MAAM,EAAEQ,cAAc,CAAC,QAAD,CADT;IAEbP,QAAQ,EAAEO,cAAc,CAAC,UAAD;EAFX,CAAf;EAKA,MAAMO,KAAK,GAAG;IAAEjB,YAAF;IAAgBkB,MAAhB;IAAwBd,eAAxB;IAAyCK;EAAzC,CAAd;EACA,oBAAO,QAAC,YAAD,CAAc,QAAd;IAAuB,KAAK,EAAEQ,KAA9B;IAAA,GAAyClB;EAAzC;IAAA;IAAA;IAAA;EAAA,QAAP;AACD;;IAlDeD,oB;;KAAAA,oB"},"metadata":{},"sourceType":"module"}